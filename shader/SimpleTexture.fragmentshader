#version 330 core

// Ouput data
layout(location = 0) out vec4 color;

uniform sampler2D simpletexture;
uniform sampler2D infortexture;
uniform sampler2D brightexture;
uniform sampler2D endtexture;
uniform float speed;
uniform float madness;
in vec2 UV;

vec2 poissonDisk[64] = vec2[](
vec2(-0.934812, 0.366741),
vec2(-0.918943, -0.0941496),
vec2(-0.873226, 0.62389),
vec2(-0.8352, 0.937803),
vec2(-0.822138, -0.281655),
vec2(-0.812983, 0.10416),
vec2(-0.786126, -0.767632),
vec2(-0.739494, -0.535813),
vec2(-0.681692, 0.284707),
vec2(-0.61742, -0.234535),
vec2(-0.601184, 0.562426),
vec2(-0.607105, 0.847591),
vec2(-0.581835, -0.00485244),
vec2(-0.554247, -0.771111),
vec2(-0.483383, -0.976928),
vec2(-0.476669, -0.395672),
vec2(-0.439802, 0.362407),
vec2(-0.409772, -0.175695),
vec2(-0.367534, 0.102451),
vec2(-0.35313, 0.58153),
vec2(-0.341594, -0.737541),
vec2(-0.275979, 0.981567),
vec2(-0.230811, 0.305094),
vec2(-0.221656, 0.751152),
vec2(-0.214393, -0.0592364),
vec2(-0.204932, -0.483566),
vec2(-0.183569, -0.266274),
vec2(-0.123936, -0.754448),
vec2(-0.0859096, 0.118625),
vec2(-0.0610675, 0.460555),
vec2(-0.0234687, -0.962523),
vec2(-0.00485244, -0.373394),
vec2(0.0213324, 0.760247),
vec2(0.0359813, -0.0834071),
vec2(0.0877407, -0.730766),
vec2(0.14597, 0.281045),
vec2(0.18186, -0.529649),
vec2(0.188208, -0.289529),
vec2(0.212928, 0.063509),
vec2(0.23661, 0.566027),
vec2(0.266579, 0.867061),
vec2(0.320597, -0.883358),
vec2(0.353557, 0.322733),
vec2(0.404157, -0.651479),
vec2(0.410443, -0.413068),
vec2(0.413556, 0.123325),
vec2(0.46556, -0.176183),
vec2(0.49266, 0.55388),
vec2(0.506333, 0.876888),
vec2(0.535875, -0.885556),
vec2(0.615894, 0.0703452),
vec2(0.637135, -0.637623),
vec2(0.677236, -0.174291),
vec2(0.67626, 0.7116),
vec2(0.686331, -0.389935),
vec2(0.691031, 0.330729),
vec2(0.715629, 0.999939),
vec2(0.8493, -0.0485549),
vec2(0.863582, -0.85229),
vec2(0.890622, 0.850581),
vec2(0.898068, 0.633778),
vec2(0.92053, -0.355693),
vec2(0.933348, -0.62981),
vec2(0.95294, 0.156896)
);


float random(vec2 seed, int i){
	vec3 seed3 = vec3(seed,i);
	float dot_product = dot(seed3, vec3(12.9898,78.233,45.164));
	return fract(sin(dot_product) * 43758.5453);
}

vec4 GetBritness(sampler2D bt, vec2 uv)
{
	float delta = 0.01; 
	vec4 aveBritness = ( texture(bt, uv + vec2(-delta, delta)) +
				   	  texture(bt, uv + vec2( delta,-delta)) +
					  texture(bt, uv + vec2(-delta,-delta)) +
					  texture(bt, uv + vec2( delta, delta)) + 
					  texture(bt, uv + vec2(-0.5 * delta, 0.5 * delta)) +
					  texture(bt, uv + vec2( 0.5 * delta,-0.5 * delta)) +
					  texture(bt, uv + vec2(-0.5 * delta,-0.5 * delta)) +
					  texture(bt, uv + vec2( 0.5 * delta, 0.5 * delta)) +
					  texture(bt, uv + vec2(0, delta)) +
					  texture(bt, uv + vec2(0,-delta)) +
					  texture(bt, uv + vec2(-delta,0)) +
					  texture(bt, uv + vec2( delta,0)) ).rgba * 0.083;
	return aveBritness;
}

void main(){
	vec4 brightness = texture(brightexture,UV);
	vec3 orgaaCol = texture(simpletexture,UV).rgb;
	float distance = distance(UV,vec2(0.5,0.5));
	float delta = 0.002;
	vec2 uvbias = texture(infortexture, UV).xy;
	
	vec2 UVrefracted = UV + uvbias;
	if(UVrefracted.x < 0 || UVrefracted.x > 1 || UVrefracted.y < 0 || UVrefracted.y > 1)
		UVrefracted = UV;
	vec3 aveColor = ( texture(simpletexture, UVrefracted+vec2(-delta, delta)) +
					  texture(simpletexture, UVrefracted+vec2( delta,-delta)) +
					  texture(simpletexture, UVrefracted+vec2(-delta,-delta)) +
					  texture(simpletexture, UVrefracted+vec2( delta, delta)) + 
					  texture(simpletexture, UVrefracted+vec2(-0.5 * delta, 0.5 * delta)) +
					  texture(simpletexture, UVrefracted+vec2( 0.5 * delta,-0.5 * delta)) +
					  texture(simpletexture, UVrefracted+vec2(-0.5 * delta,-0.5 * delta)) +
					  texture(simpletexture, UVrefracted+vec2( 0.5 * delta, 0.5 * delta)) +
					  texture(simpletexture, UVrefracted+vec2(0, delta)) +
					  texture(simpletexture, UVrefracted+vec2(0,-delta)) +
					  texture(simpletexture, UVrefracted+vec2(-delta,0)) +
					  texture(simpletexture, UVrefracted+vec2( delta,0)) ).rgb * 0.083;
	float blurDegree =clamp( 3.0 * pow(texture(infortexture, UV).z - 0.03f , 50)*(1-clamp(10.0 * speed,0,1)),0,1);

	if(distance < 0.2){
		color =  texture(simpletexture, UVrefracted);
	}
	else{
		float displace = madness * pow(speed,1.2) * pow(distance - 0.2,2);
		vec2 array = normalize(vec2(0.5,0.5)-UVrefracted);
		float count = 0.0f;
		int i ;
		for(i = 0;i<40;i++)
		{
		    vec2 tempUV =  UVrefracted - i * displace * array;
			if(tempUV.x<=1.0 && tempUV.x >= 0.0 && tempUV.y >= 0.0 && tempUV.y <= 1.0)
			{
				count++;
				color += texture(simpletexture, tempUV);
			}
				
		}
		color = color /count;
	}
	float endTextureAlph = smoothstep(0.06f,0.07f,madness);
	color.rgb = mix(color.rgb, aveColor, blurDegree);
	color.rgb = mix(color.rgb, vec3(1,1,0.8), brightness.a);
	color.rgb = mix(color.rgb, texture(endtexture, UV).rbg,endTextureAlph);

}