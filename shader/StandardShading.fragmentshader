#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec2 Normal_clipspace;
in vec3 Normal_lightspace;

in vec3 TorchDirection_tangentspace;

in vec3 EyeDirection_worldspace;
in vec3 LightDirection_worldspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

in vec4 PointCoord;
in vec4 ShadowCoord;
// Ouput data
out vec4 color;
out vec4 information;
out vec4 brightness;
// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D DiffuseTextureSampler;
uniform sampler2D NormalTextureSampler;
uniform sampler2D SpecularTextureSampler;
uniform sampler2D shadowMap;

uniform vec3 LightPosition_worldspace;
uniform vec3 CameraPos_worldspace;
uniform vec3 TorchPosition_worldspace;
uniform vec3 TorchDirection_worldspace;
uniform float speed;
uniform int isShader;
uniform int haveTorch;
uniform	float diffDegree;
uniform	float specDegree;
uniform float ZNear;
uniform float ZFar;
uniform vec3 eyePosWP;
uniform int classNr;
uniform float lightPower;
uniform float distScan;
float rand(vec2 co){
  return fract(length(co) * 43758.5453);
}

vec2 poissonDisk[64] = vec2[](
vec2(-0.934812, 0.366741),
vec2(-0.918943, -0.0941496),
vec2(-0.873226, 0.62389),
vec2(-0.8352, 0.937803),
vec2(-0.822138, -0.281655),
vec2(-0.812983, 0.10416),
vec2(-0.786126, -0.767632),
vec2(-0.739494, -0.535813),
vec2(-0.681692, 0.284707),
vec2(-0.61742, -0.234535),
vec2(-0.601184, 0.562426),
vec2(-0.607105, 0.847591),
vec2(-0.581835, -0.00485244),
vec2(-0.554247, -0.771111),
vec2(-0.483383, -0.976928),
vec2(-0.476669, -0.395672),
vec2(-0.439802, 0.362407),
vec2(-0.409772, -0.175695),
vec2(-0.367534, 0.102451),
vec2(-0.35313, 0.58153),
vec2(-0.341594, -0.737541),
vec2(-0.275979, 0.981567),
vec2(-0.230811, 0.305094),
vec2(-0.221656, 0.751152),
vec2(-0.214393, -0.0592364),
vec2(-0.204932, -0.483566),
vec2(-0.183569, -0.266274),
vec2(-0.123936, -0.754448),
vec2(-0.0859096, 0.118625),
vec2(-0.0610675, 0.460555),
vec2(-0.0234687, -0.962523),
vec2(-0.00485244, -0.373394),
vec2(0.0213324, 0.760247),
vec2(0.0359813, -0.0834071),
vec2(0.0877407, -0.730766),
vec2(0.14597, 0.281045),
vec2(0.18186, -0.529649),
vec2(0.188208, -0.289529),
vec2(0.212928, 0.063509),
vec2(0.23661, 0.566027),
vec2(0.266579, 0.867061),
vec2(0.320597, -0.883358),
vec2(0.353557, 0.322733),
vec2(0.404157, -0.651479),
vec2(0.410443, -0.413068),
vec2(0.413556, 0.123325),
vec2(0.46556, -0.176183),
vec2(0.49266, 0.55388),
vec2(0.506333, 0.876888),
vec2(0.535875, -0.885556),
vec2(0.615894, 0.0703452),
vec2(0.637135, -0.637623),
vec2(0.677236, -0.174291),
vec2(0.67626, 0.7116),
vec2(0.686331, -0.389935),
vec2(0.691031, 0.330729),
vec2(0.715629, 0.999939),
vec2(0.8493, -0.0485549),
vec2(0.863582, -0.85229),
vec2(0.890622, 0.850581),
vec2(0.898068, 0.633778),
vec2(0.92053, -0.355693),
vec2(0.933348, -0.62981),
vec2(0.95294, 0.156896)
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,1232.892));
	return fract(sin(dot_product) * 43758.5453);
}
//??int GetBlockedNum(sampler2DShadow sm, vec4 pos_lightspace, float bias, int detectTimes,float subPixWidth, vec2 dz_duv)
int GetBlockedNum(sampler2D sm, vec4 pos_lightspace, float bias, int detectTimes,float subPixWidth, vec2 dz_duv)
{
	int BlockedNum = 0;
	
	for(int i = -detectTimes; i <= detectTimes;i += 1)
		for(int j = -detectTimes;j <= detectTimes;j += 1)
		{
			vec2 deviation =  vec2(i,j) * subPixWidth;
			float devi_z = dot(deviation,dz_duv);
			BlockedNum += texture( sm, pos_lightspace.xy + deviation).x < (pos_lightspace.z + bias  + devi_z) ? 1 : 0;
			if(subPixWidth <= 0.0001 && BlockedNum > 0)
				return BlockedNum;
		}
	return BlockedNum;
}
bool isBlocked(float blockerDep, float recDep)
{
	if(blockerDep >= recDep - 0.01)
		return false;
	else 
		return true;
}

float SearchRegionRadiusUV(float lightSize, float zWorld)
{
    return lightSize * (zWorld - ZNear) / (ZFar - ZNear);
}

float AveBlockerZ(sampler2D sm, vec4 pos_lightspace, int detectTimes,float radius, vec2 dz_duv)
{
	float depthSum = 0.0f;
	int blocknum = 0;
	for(int i = 0;i<detectTimes;i++)
	{
		vec2 deviation =  poissonDisk[int(64*random(Position_worldspace.xyz,i))%64] * radius;
		float dz = dot(dz_duv,deviation);
		float temp =  texture( sm, pos_lightspace.xy + deviation).x;
			if(isBlocked(temp,pos_lightspace.z + dz))
			{	
				depthSum += temp;
				blocknum ++;
			}
	}
	return depthSum/blocknum;
}
float GetVisibility(sampler2D sm, vec4 pos_lightspace, float bias, vec2 dz_duv, float penumWidth)
{
	float resVisibility = 0.0f;
	float poissonRadiu = penumWidth;
	int poissonTimes = 64;
	float perVisibility = (1.0/ poissonTimes );

	for(int k = 0;k < poissonTimes;k++)
	{
		vec2 deviation =  poissonDisk[(k * 17)%64] * poissonRadiu;
		float dz = dot(dz_duv,deviation);
		resVisibility += texture( sm, pos_lightspace.xy + deviation).x > (pos_lightspace.z - bias)? 1.0 : 0.0;
	}
	return   perVisibility *  resVisibility;
}
vec2 getDz_Duv(vec3 normal_lightspace)
{
	return vec2(-normal_lightspace.x / normal_lightspace.z , -normal_lightspace.y / normal_lightspace.z);
}
bool mayCastShad(vec4 posLightSpace)
{	
	if(posLightSpace.x <= 0.01 || posLightSpace.x >= 0.99 ||
	   posLightSpace.y <= 0.01 || posLightSpace.y >= 0.99 ||
	   posLightSpace.z <= 0.01 || posLightSpace.z >= 0.99)
	   return false;
	else
		return true;
}

float ZClipToZCmra(float zClip)
{	
	//return ZNear + zClip * (ZFar - ZNear);
	return ZFar*ZNear / (ZFar - zClip*(ZFar-ZNear)); 
//	return zClip * 3.4f;
}

float PenumbraRadiusUV(float lightSize, float zReceiver, float zBlocker)
{
    return lightSize * (zReceiver - zBlocker) / zBlocker;
}
float getFlogDensity(float height)
{
	return 1.0f / (height + 0.1);
}
float GetTorchPower(float disTorch,float FlareAngle)
{
	float distance_torch = length( TorchPosition_worldspace - Position_worldspace );
	float depth = dot(Position_worldspace - TorchPosition_worldspace , TorchDirection_worldspace);
	//float cosViewAng = clamp(depth/distance_torch + 0.01 * rand(Position_worldspace.xy),0,1);
	float cosViewAng = depth/distance_torch;
	float cosFlreAng = cos(FlareAngle/2);
	float cosSubFlreAng = cos(0.85 * FlareAngle/2);
	return haveTorch == 1 ? smoothstep(cosFlreAng,cosSubFlreAng,cosViewAng) : 0.0f;
}
float PCSS(sampler2D shadowMap,vec4 ShadowCoord, float cosTheta,vec3 Normal_lightspace)
{
	float resVisibility;
	if(!mayCastShad(ShadowCoord))
	{
		resVisibility = 1.0f;
	}
	else{
		//float bias = -clamp(0.0005 * tan(acos(cosTheta)), 0,0.005);
		int detectTimes = 2;
		vec2 dz_duv = getDz_Duv(Normal_lightspace);
		float bias = 0;//dz_duv = vec2(0,0);
		
		//float penumbra = LightSize * ((posCmra.z) -  aveBlckZCmra) / aveBlckZCmra;
		int nblock = GetBlockedNum(shadowMap, ShadowCoord, bias, detectTimes, 0.05, dz_duv);
		
		if (nblock == 0)//total lighted
		{
			resVisibility = 1.0f;
		}
		else// half shadow	
		{
			float aveBlckZClip =  AveBlockerZ(shadowMap, ShadowCoord, 100, 0.001,dz_duv);
			float aveBlckZCmra = ZClipToZCmra(aveBlckZClip);
			float LightSize = 0.5;
			float penumbra = LightSize * ((ShadowCoord.z) -  aveBlckZClip) / aveBlckZClip;
			resVisibility = GetVisibility(shadowMap,ShadowCoord,bias,dz_duv, penumbra);
		}		
		
	}
	return resVisibility;
}
float GetFlogDegree(vec3 Position_worldspace,vec3 eyePosWP,float TorchPower,float distance_torch)
{
	//float aclinicDis = length(Position_worldspace.xz - eyePosWP.xz);
	//float flogdegree = clamp(0.04 * aclinicDis * log(Position_worldspace.y/eyePosWP.y) / (Position_worldspace.y - eyePosWP.y),0,1);
	float flogdegree = clamp(pow(0.1 * length(Position_worldspace - eyePosWP),0.8),0,1);
	flogdegree = TorchPower == 0 ?flogdegree: clamp(flogdegree - 0.015 * TorchPower/pow(distance_torch,1.2),0,1);
	return flogdegree;
}

void main(){

	vec3 LightColor = vec3(0.6,0.5,0.5);
	vec3 TyndallColor = vec3(1.0,1.0,1.0);
	vec3 TorchColor = vec3(1.0,0.8,0.2);
	vec3 flogcolor = vec3(0.0,0.0,0.0);
	//vec3 rayColor = vec3(0.8, 0, 0 );
	float LightPower = isShader == 1 ? 0.00f : lightPower;
	

	float distance_torch = length( TorchPosition_worldspace - Position_worldspace );
	float TorchPower = GetTorchPower(distance_torch,0.53);
	vec3 MaterialDiffuseColor = texture( DiffuseTextureSampler, UV ).rgb;
	vec3 rayColor = MaterialDiffuseColor *  vec3(0.8, 0, 0 );
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texture( SpecularTextureSampler, UV ).rgb * 0.5;//?

	vec3 TextureNormal_tangentspace = normalize(texture( NormalTextureSampler,UV ).rgb*2.0 - 1.0);//?
	vec3 n = TextureNormal_tangentspace;//?
	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	//vec3 invDirEye = normalize(CameraPos_worldspace - Position_worldspace);
	//float temp_proLength = dot(LightPosition_worldspace - Position_worldspace,invDirEye);
	//float temp_proLengthtwo = dot(LightPosition_worldspace - CameraPos_worldspace, - invDirEye);
	//float dis_light = length(LightPosition_worldspace - (Position_worldspace + invDirEye * temp_proLength));
	//float TyndallDegree = temp_proLength > 0 ? ( temp_proLengthtwo > 0 ? clamp(0.2 * exp(- 0.3 * dis_light) * pow(temp_proLengthtwo / dis_light,0.5),0,1) : 0.0f ): 0.0f;

	vec3 n_cspace = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_tangentspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_tangentspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	

	vec3 l_torch = normalize( TorchDirection_tangentspace );
	float cosTheta_torch = clamp( dot( n,l ), 0,1 );
	vec3 R_torch = reflect(-l_torch,n);
	float cosAlpha_torch = clamp( dot( E,R_torch ), 0,1 );
	/////////////////////////////////////////////////////////////////////shadow
	float visibility = PCSS( shadowMap, ShadowCoord,  cosTheta, Normal_lightspace);
	//float visibility = texture( shadowMap, ShadowCoord.xy).x > (ShadowCoord.z)? 1.0 : 0.0;
	//////////////////////////////////////////////////////////////////////////////////vertical flog
	
	float flogdegree = GetFlogDegree( Position_worldspace, eyePosWP, TorchPower, distance_torch);
	//flogdegree = 0;
	vec3 torchEffect = MaterialDiffuseColor * TorchColor * TorchPower * cosTheta_torch /pow(distance_torch,1.2) * diffDegree+
					   MaterialSpecularColor * TorchColor * TorchPower * pow(cosAlpha_torch,specDegree)/pow(distance_torch,1.0) * specDegree;
	color.rgb = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor * 0.2+
		// Diffuse : "color" of the object
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta /(distance*distance) * diffDegree +
		// Specular : reflective highlight, like a mirror
		visibility * MaterialSpecularColor * LightColor * LightPower * cosAlpha /(distance*distance) * specDegree +
		// TorchEffect:
		torchEffect;
	
	color.rgb = mix(color.rgb,flogcolor,flogdegree);
	//color.rgb = color.rgb * (1- TyndallDegree) + TyndallColor * TyndallDegree;
	//brightness = vec4(0,0,TyndallDegree,TyndallDegree);
	if(classNr == 0)//ghost
	{
		color.a = 0.1;
		if(TorchPower != 0)//lighted ghost's fragment
		{
			information = vec4(0,0,1,1);
			brightness = vec4(0.0,1.0,0.0 ,1);
		}
		else
		{
			vec3 normalcmraspace = normalize(Normal_cameraspace);
			float refractionRate = 0.05;
			information = vec4(-refractionRate * normalcmraspace.x,- refractionRate * normalcmraspace.y,1,1);
			float rayAlpha = distance_torch < distScan ? 0.0 : (distance_torch > distScan + 0.1? 0.0 : 1.0);
			color.rgb = mix(color.rgb, rayColor, rayAlpha);
		}
		
	}
	else if(classNr == 1)//normal object
	{
		color.a = 1.0;
		information = vec4(0,0,PointCoord.z/PointCoord.w,1);
		float rayAlpha = distance_torch < distScan ? 0.0 : (distance_torch > distScan + 0.1? 0.0 : 1.0);
		color.rgb = mix(color.rgb, MaterialDiffuseColor, rayAlpha);
	}
	else if(classNr == 2)//lightGun
	{
		float lightGunAlpah = 0.15 * (1- 2.0 *distance_torch - 2.0 * length(Normal_clipspace));
		color = vec4(1,0.7,0.5,lightGunAlpah);
		brightness = vec4(1,0,0 , 0.5 * (1-0.3*distance_torch));
	}

}
